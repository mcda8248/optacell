package icarus.application;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

import org.optaplanner.core.api.solver.Solver;
import org.optaplanner.core.api.solver.SolverFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import icarus.generator.TowerScheduleGenerator;
import icarus.model.TowerSchedule;
import icarus.scoring.LocationStrengthWeightFactory;

/**
 * The Cell Tower application uses OptaPlanner to schedule cell phone towers onto a
 * location grid of latitudes and longitudes, attempting to provide coverage for the
 * best combination of high priority cell phones.
 * <p>
 * The solver configuration is defined by an optaplanner defined xml resource -
 * CellTowerSolverConfig.xml
 */
public class CellTowerApp
{
   /** The solver factory that generates an OptaPlanner solver for the problem space */
   private static SolverFactory<TowerSchedule> solverFactory;
   /** logger */
   private final static Logger logger = LoggerFactory.getLogger(CellTowerApp.class);
   /** Properties */
   private static Properties props;

   /**
    * Main entrance point for the application, this initializes Optaplanner's solver,
    * creates our cell phone and cell tower lists, and executes the solver, providing
    * metrics and solutions per pre-configured guidelines
    * <p>
    * Configuration is handled via an xml resource - CellTowerSolverConfig.xml
    * <p>
    * Handles arguments to tell it what type of scheduling run to perform.  Use
    * 'save <optionalFileName>' to save a file containing the problem space generated by
    * this run.  Use 'file <optionalFileName>' to import a problem space for this run. 
    * If no argument is provided, it just runs without saving.
    *
    * @param args Arguments defining what type of scheduling run to perform
    */
   public static void main(String[] args)
   {
      solverFactory = SolverFactory.createFromXmlResource("cellTowerSolverConfig.xml");

      String howToRunArg = "";
      if (args.length > 0)
      {
         howToRunArg = args[0];
      }

      props = new Properties();
      try
      {
         props.load(ClassLoader.getSystemResourceAsStream("towerscheduler.properties"));
      }
      catch(IOException e)
      {
         logger.info("Failed to load properties file - " + e);
      }

      Solver<TowerSchedule> solver = solverFactory.buildSolver();
      TowerSchedule sched = null;
      if ("file".equals(howToRunArg))
      {
         String fileToLoad = props.getProperty("initial.config.file");
         if (args.length > 1)
         {
            fileToLoad = args[1];
         }
         sched = TowerScheduleGenerator.createFromImport(fileToLoad);
      }
      else
      {
         sched = TowerScheduleGenerator.createFromProperties(props);
      }

      if ("save".equals(howToRunArg))
      {
         String filename = props.getProperty("initial.config.file");
         if (args.length > 1)
         {
            filename = args[1];
         }
         sched.saveConfigToFile(filename);
      }

      solver.solve(sched);

      logger.info("Comparison method was called " + LocationStrengthWeightFactory.callCount + " times");
      //TODO - Switch so geo json file gets written to property or command argument defined filename
      try
      {
         Files.write(Paths.get("geojson.json"), solver.getBestSolution().buildGeoJson().getBytes());
      } catch (IOException e)
      {
         logger.info("Failed to write geo json file");
      }
   }
}
